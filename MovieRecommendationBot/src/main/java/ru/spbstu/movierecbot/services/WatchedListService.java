package ru.spbstu.movierecbot.services;

import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import reactor.core.publisher.Mono;
import reactor.core.scheduler.Schedulers;
import ru.spbstu.movierecbot.dao.filmapi.FilmDao;
import ru.spbstu.movierecbot.dao.pg.WatchedFilmsDao;
import ru.spbstu.movierecbot.dbClasses.tables.records.WatchedFilmsRecord;
import ru.spbstu.movierecbot.dto.FilmDto;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.List;
import java.util.concurrent.ConcurrentHashMap;

@Service
public class WatchedListService {
    private static final String DATE_RANGE_REGEX = "\\d{2}\\.\\d{2}\\.\\d{4}\\s*-\\s*\\d{2}\\.\\d{2}\\.\\d{4}";
    DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("dd.MM.yyyy");
    private final WatchedFilmsDao watchedFilmsDao;
    private final FilmDao filmDao;
    public ConcurrentHashMap<Long, FilmDto> userMarkOrReviewToFilm = new ConcurrentHashMap<>();

    @Autowired
    public WatchedListService(WatchedFilmsDao watchedFilmsDao, FilmDao filmDao) {
        this.watchedFilmsDao = watchedFilmsDao;
        this.filmDao = filmDao;
    }

    public record DateRange(LocalDate startOfPeriod, LocalDate endOfPeriod) {}

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /threeMonths, /lastMonth, /lastYear
    public Mono<String> showWatchedFilmsListByPeriod(long telegramId, String command) {
        return Mono.fromCallable(() -> {
                    LocalDate now = LocalDate.now();
                    DateRange dateRange = new DateRange(now, now);
                    String header = switch (command) {
                        case "/threeMonths" -> {
                            dateRange = new DateRange(now.minusMonths(3), now);
                            yield "üçø <b>–í–∞—à–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞:</b>\n\n";
                        }
                        case "/lastMonth" -> {
                            dateRange = new DateRange(now.minusMonths(1), now);
                            yield "üçø <b>–í–∞—à–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü:</b>\n\n";
                        }
                        case "/lastYear" -> {
                            dateRange = new DateRange(now.minusYears(1), now);
                            yield "üçø <b>–í–∞—à–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥:</b>\n\n";
                        }
                        default -> throw new IllegalArgumentException("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: " + command);
                    };
                    return buildFilmListResponse(telegramId, dateRange.startOfPeriod, dateRange.endOfPeriod, header);
                })
                .subscribeOn(Schedulers.boundedElastic())
                .flatMap(mono -> mono); // –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º Mono<Mono<String>> ‚Üí Mono<String>
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /exactPeriod
    public Mono<String> showWatchedFilmsListByExactPeriod(long telegramId, String period) {
        return Mono.fromCallable(() -> {
                    DateRange dateRange = parsePeriod(period);

                    if (dateRange.startOfPeriod.equals(LocalDate.MIN) && dateRange.endOfPeriod.equals(LocalDate.MAX)) {
                        return Mono.<String>just("‚ö†Ô∏è <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥</b> ‚ö†Ô∏è\n\n" +
                                "–í—ã–≤–æ–¥ —Ñ–∏–ª—å–º–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.");
                    }

                    String header = "üìΩÔ∏è <b>–í–∞—à–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã –∑–∞ –ø–µ—Ä–∏–æ–¥:</b> " + period + ":\n\n";
                    return buildFilmListResponse(telegramId, dateRange.startOfPeriod, dateRange.endOfPeriod, header);
                })
                .subscribeOn(Schedulers.boundedElastic())
                .flatMap(mono -> mono); // –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º Mono<Mono<String>> –≤ Mono<String>
    }
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /allPeriod
    public Mono<String> showWatchedFilmsListByAllPeriod(long telegramId) {
        return Mono.fromCallable(() -> {
            StringBuilder result = new StringBuilder("üìΩÔ∏è <b>–í–∞—à–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è:</b>\n\n");
            List<WatchedFilmsRecord> filmList = watchedFilmsDao.getWatchedFilmsByAllPeriod(telegramId);

            if (filmList.isEmpty()) {
                return result.append("üé¨ –í–∞—à —Å–ø–∏—Å–æ–∫ \"–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã\" –ø—É—Å—Ç!\n" +
                        "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ñ–∏–ª—å–º —Å –ø–æ–º–æ—â—å—é /addToWatchedFilmsList").toString();
            }

            filmList.forEach(film -> {
                result.append("üé¨ <b>").append(film.getTitle()).append("</b>\n");

                if (film.getRating() != null) {
                    result.append("‚≠ê <i>–û—Ü–µ–Ω–∫–∞:</i> <b>").append(film.getRating()).append("/10</b>\n");
                }

                if (film.getReview() != null && !film.getReview().isEmpty()) {
                    result.append("‚úèÔ∏è <i>–û—Ç–∑—ã–≤:</i> ").append(film.getReview()).append("\n");
                }
                result.append("\n");
            });
            return result.toString();
        }).subscribeOn(Schedulers.boundedElastic());
    }


    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /addToWatchedFilmsList
    public Mono<String> addToWatchedFilmsList(long telegramId, String filmTitle) {
        return filmDao.getFilmByName(filmTitle)
                .flatMap(filmDto -> Mono.fromCallable(() -> {
                    if(watchedFilmsDao.addWatchedFilm(telegramId, filmDto.id(), filmDto.russianTitle()) !=0){;
                            return "‚úÖ –§–∏–ª—å–º \"" + filmDto.russianTitle() + "\" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ! üé¨";}
                    else {
                            return "‚ÑπÔ∏è –§–∏–ª—å–º \"" + filmDto.russianTitle() + "\" —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö.";}
                })
                        .subscribeOn(Schedulers.boundedElastic())) // –í—ã–Ω–æ—Å–∏–º –±–ª–æ–∫–∏—Ä—É—é—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
                .onErrorResume(error -> Mono.just("‚ö†Ô∏è –§–∏–ª—å–º \"" + filmTitle + "\" –Ω–µ –Ω–∞–π–¥–µ–Ω.\n" +
                        "–°–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –Ω–µ –∏–∑–º–µ–Ω—ë–Ω."));
    }

    // –ó–¥–µ—Å—å –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∏–ª—å–º–∞ –≤ –ë–î –ø–æ API
    public Mono<Integer> checkingForMovieExistence(long telegramId, String filmTitle){
        return filmDao.getFilmByName(filmTitle)
                .flatMap(filmDto -> Mono.fromCallable(() -> {
                            userMarkOrReviewToFilm.put(telegramId, filmDto);
                            //–í–Ω—É—Ç—Ä–∏ addWatchedFilm –µ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                            return watchedFilmsDao.addWatchedFilm(telegramId, filmDto.id(), filmDto.russianTitle());
                        })
                        .subscribeOn(Schedulers.boundedElastic()))
                .onErrorResume(error -> Mono.empty());
    }

    //–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
    public Boolean checkFilmMark(String mark){
        String regex = "^(10|[0-9])$";
        return  mark.matches(regex);
    }
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /addScoreToWatchedFilm, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ checkFilmTitle
    public Mono<String> addMarkToWatchedFilm(long telegramId, String mark) {
         if (checkFilmMark(mark)) {
             return Mono.fromCallable(() -> {
                        int intMark = Integer.parseInt(mark);
                        FilmDto filmDto = userMarkOrReviewToFilm.get(telegramId);
                        watchedFilmsDao.addMarkToFilm(telegramId, filmDto.id(), intMark);
                        userMarkOrReviewToFilm.remove(telegramId);
                        return "‚≠ê –í—ã –æ—Ü–µ–Ω–∏–ª–∏ —Ñ–∏–ª—å–º \"" + filmDto.russianTitle() + "\" –Ω–∞ " + intMark + "/10";
                    })
                    .subscribeOn(Schedulers.boundedElastic());
        }
        else return Mono.empty();
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /addReviewToWatchedFilm, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ checkFilmTitle
    public Mono<String> addReviewToWatchedFilm(long telegramId, String review) {
            return Mono.fromCallable(() -> {
                FilmDto filmDto = userMarkOrReviewToFilm.get(telegramId);
                watchedFilmsDao.addReviewToFilm(telegramId, filmDto.id(), review);
                userMarkOrReviewToFilm.remove(telegramId);
                return "üìù –í—ã –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤ –∫ —Ñ–∏–ª—å–º—É \"" + filmDto.russianTitle() + "\".";})
                    .subscribeOn(Schedulers.boundedElastic());
    }

    // –ü–∞—Ä—Å–µ—Ä –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    private DateRange parsePeriod(String periodString) {
        if (periodString == null || !periodString.matches(DATE_RANGE_REGEX)) {
            return new DateRange(LocalDate.MIN, LocalDate.MAX);
        }
        try {
            String[] dates = periodString.split("\\s*-\\s*");
            LocalDate startDate = LocalDate.parse(dates[0], DATE_FORMATTER);
            LocalDate endDate = LocalDate.parse(dates[1], DATE_FORMATTER);
            return startDate.isAfter(endDate)
                    ? new DateRange(endDate, startDate)
                    : new DateRange(startDate, endDate);
        } catch (DateTimeParseException e) {
            return new DateRange(LocalDate.MIN, LocalDate.MAX);
        }
    }

    // –°–±–æ—Ä –æ—Ç–≤–µ—Ç–∞
    private Mono<String> buildFilmListResponse(long telegramId, LocalDate startDate, LocalDate endDate, String header) {
        return Mono.fromCallable(() -> {
            StringBuilder result = new StringBuilder(header);
            List<WatchedFilmsRecord> filmList = watchedFilmsDao
                    .getWatchedFilmsByExactPeriod(telegramId, startDate, endDate);

            if (filmList.isEmpty()) {
                return result.append("üì≠ <b>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥.</b>").toString();
            }

            filmList.forEach(film -> {
                result.append("üé¨ <b>").append(film.getTitle()).append("</b>\n");

                if (film.getRating() != null) {
                    result.append("‚≠ê <i>–û—Ü–µ–Ω–∫–∞:</i> <b>").append(film.getRating()).append("/10</b>\n");
                }

                if (film.getReview() != null && !film.getReview().isEmpty()) {
                    result.append("‚úèÔ∏è <i>–û—Ç–∑—ã–≤:</i> ").append(film.getReview()).append("\n");
                }
                result.append("\n");
            });
            return result.toString();
        }).subscribeOn(Schedulers.boundedElastic());
    }

}