package ru.spbstu.movierecbot.services;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import reactor.core.publisher.Flux;
import ru.spbstu.movierecbot.dao.filmapi.ActorApiDao;
import ru.spbstu.movierecbot.dao.filmapi.CountryApiDao;
import ru.spbstu.movierecbot.dao.filmapi.GenreApiDao;
import ru.spbstu.movierecbot.dao.pg.*;
import ru.spbstu.movierecbot.dbClasses.tables.records.ActorsRecord;
import ru.spbstu.movierecbot.dbClasses.tables.records.CountriesRecord;
import ru.spbstu.movierecbot.dbClasses.tables.records.GenresRecord;
import ru.spbstu.movierecbot.dbClasses.tables.records.YearsRecord;
import reactor.core.publisher.Mono;
import reactor.core.scheduler.Schedulers;
import static ru.spbstu.movierecbot.services.CategoryCheckService.CategoryType;
import  ru.spbstu.movierecbot.services.CategoryCheckService.CheckResultLists;
import java.util.Arrays;
import java.util.List;


@Service
public class PreferencesService {
    private final ActorsDao actorsDao;
    private final CountriesDao countriesDao;
    private final GenreDao genreDao;
    private final YearDao yearDao;
    private final CategoryCheckService categoryCheckService;
    final int PREFERENCE_ALREADY_EXISTS = 0;
    final int PREFERENCE_ADDED = 1;
    final int PREFERENCE_NOT_EXISTS = 0;
    final int PREFERENCE_DELETED = 1;

    @Autowired
    public PreferencesService(ActorsDao actorsDao, CountriesDao countriesDao, GenreDao genreDao, YearDao yearDao, GenreApiDao genreApiDao, CountryApiDao countryApiDao, ActorApiDao actorApiDao, CategoryCheckService categoryCheckService) {
        this.actorsDao = actorsDao;
        this.countriesDao = countriesDao;
        this.genreDao = genreDao;
        this.yearDao = yearDao;
        this.categoryCheckService = categoryCheckService;
    }


    record PreferenceResult(String value, int status) {}

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    public Mono<String> showPreferences(long telegramId) {
        // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ DAO-–≤—ã–∑–æ–≤—ã –∏ —É–∫–∞–∑—ã–≤–∞–µ–º scheduler
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
        Mono<List<ActorsRecord>> actorsMono = Mono.fromCallable(() -> actorsDao.getActorsByTelegramId(telegramId))
                .subscribeOn(Schedulers.boundedElastic());

        Mono<List<CountriesRecord>> countriesMono = Mono.fromCallable(() -> countriesDao.getCountriesByTelegramId(telegramId))
                .subscribeOn(Schedulers.boundedElastic());

        Mono<List<GenresRecord>> genresMono = Mono.fromCallable(() -> genreDao.getGenresByTelegramId(telegramId))
                .subscribeOn(Schedulers.boundedElastic());

        Mono<List<YearsRecord>> yearsMono = Mono.fromCallable(() -> yearDao.getYearsByTelegramId(telegramId))
                .subscribeOn(Schedulers.boundedElastic());

        // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return Mono.zip(actorsMono, countriesMono, genresMono, yearsMono)
                .map(tuple -> {
                    List<ActorsRecord> actors = tuple.getT1();
                    List<CountriesRecord> countries = tuple.getT2();
                    List<GenresRecord> genres = tuple.getT3();
                    List<YearsRecord> years = tuple.getT4();

                    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
                    StringBuilder result = new StringBuilder();

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
                    // –ù–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –≤–æ–æ–±—â–µ
                    if (actors.isEmpty() && countries.isEmpty() && genres.isEmpty() && years.isEmpty()) {
                        return "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /addPref.";
                    }

                    result.append("‚≠ê –í–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è ‚≠ê\n\n");

                    if (!actors.isEmpty()) {
                        result.append("üé≠ –ê–∫—Ç–µ—Ä—ã:\n");
                        actors.forEach(a -> result.append("   ‚ñ∏ ").append(a.getFullName()).append("\n"));
                        result.append("\n");
                    }

                    if (!countries.isEmpty()) {
                        result.append("üåç –°—Ç—Ä–∞–Ω—ã:\n");
                        countries.forEach(c -> result.append("   ‚ñ∏ ").append(c.getName()).append("\n"));
                        result.append("\n");
                    }

                    if (!genres.isEmpty()) {
                        result.append("üé¨ –ñ–∞–Ω—Ä—ã:\n");
                        genres.forEach(g -> result.append("   ‚ñ∏ ").append(g.getName()).append("\n"));
                        result.append("\n");
                    }

                    if (!years.isEmpty()) {
                        result.append("üìÖ –ì–æ–¥—ã:\n");
                        years.forEach(y -> result.append("   ‚ñ∏ ").append(y.getValue()).append("\n"));
                        result.append("\n");
                    }

                    return result.toString();
                });
    }


    // –û–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
    public Mono<String> addPreferences(long telegramId, String input, String preferenceCommand) {
        CategoryType type = CategoryType.fromCommand(preferenceCommand);

        // –ü–∞—Ä—Å–∏–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∑–∞–ø—è—Ç—ã–º
        List<String> parsedInput = Arrays.stream(input.split(","))
                .map(String::trim)
                .distinct()  // –£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã
                .toList();

        if (parsedInput.isEmpty()) {
            return Mono.just("–í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.");
        }

        // –†–µ–∞–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
        return Mono.fromCallable(() -> categoryCheckService.checkIsInputValidByApi(type, parsedInput))
                .subscribeOn(Schedulers.boundedElastic())
                .flatMap(checkResultLists -> {
                    if (checkResultLists.validInput.isEmpty() &&
                            (type != CategoryType.ACTOR || checkResultLists.validInputActors.isEmpty())) {
                        return Mono.just(buildResultAddMessage(type, checkResultLists));
                    }

                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∞–∫—Ç—ë—Ä–æ–≤ (–µ—Å–ª–∏ —Ç–∏–ø ACTOR –∏ –µ—Å—Ç—å validInputActors)
                    if (type == CategoryType.ACTOR) {
                        return Flux.fromIterable(checkResultLists.validInputActors)
                                .flatMap(pair -> Mono.fromCallable(() ->
                                        new PreferenceResult(
                                                pair.getValue(),
                                                addPreferenceToUserDb(telegramId, pair.getValue(), Integer.valueOf(pair.getKey()), type)
                                        )).subscribeOn(Schedulers.boundedElastic())
                                )
                                .collectList()
                                .flatMap(results -> processValidInput(results, checkResultLists, type));
                    }
                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤
                    else {
                        Integer fakeId = 0;
                        return Flux.fromIterable(checkResultLists.validInput)
                                .flatMap(pref -> Mono.fromCallable(() ->
                                        new PreferenceResult(
                                                pref,
                                                addPreferenceToUserDb(telegramId, pref, fakeId, type)
                                        )).subscribeOn(Schedulers.boundedElastic())
                                )
                                .collectList()
                                .flatMap(results -> processValidInput(results, checkResultLists, type));
                    }
                });
    }


    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–µ –∏ –¥—É–±–ª–∏–∫–∞—Ç—ã
    private Mono<String> processValidInput(
            List<PreferenceResult> results,
            CheckResultLists checkResultLists,
            CategoryType type
    ) {
        results.forEach(r -> {
            switch (r.status()) {
                case PREFERENCE_ADDED -> checkResultLists.addedPreferences.add(r.value());
                case PREFERENCE_ALREADY_EXISTS -> checkResultLists.duplicatePreferences.add(r.value());
            }
        });
        return Mono.just(buildResultAddMessage(type, checkResultLists));
    }


    // –ú–µ—Ç–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
    private String buildResultAddMessage(CategoryType type, CheckResultLists checkResultLists) {
        StringBuilder result = new StringBuilder();
        String category = type.getDisplayName().toLowerCase(); // "–∂–∞–Ω—Ä—ã", "—Ä–µ–∂–∏—Å—Å–µ—Ä—ã" –∏ —Ç.–¥.

        if (!checkResultLists.addedPreferences.isEmpty()) {
            result.append("‚ú® –û—Ç–ª–∏—á–Ω–æ! –ù–æ–≤—ã–µ ").append(category).append(" –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: \n")
                    .append("üëâ ").append(String.join(", ", checkResultLists.addedPreferences))
                    .append("\n\n");
        }

        if (!checkResultLists.duplicatePreferences.isEmpty()) {
            result.append("üòä –≠—Ç–∏ ").append(category).append(" —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: \n")
                    .append("üîπ ").append(String.join(", ", checkResultLists.duplicatePreferences))
                    .append("\n\n");
        }

        if (!checkResultLists.invalidInput.isEmpty()) {
            result.append("ü§î –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–∏ ").append(category)
                    .append(" –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ): \n")
                    .append("‚úñ ").append(String.join(", ", checkResultLists.invalidInput))
                    .append("\n\n");
        }

        return result.toString().trim();
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞)
    private int addPreferenceToUserDb(long telegramId, String preference, Integer idActor, CategoryType type) {
        return switch (type) {
            case GENRE -> genreDao.addGenre(telegramId, preference.toLowerCase());
            case ACTOR -> actorsDao.addActor(telegramId, idActor, preference);
            case YEAR -> yearDao.addYear(telegramId, Integer.parseInt(preference));
            case COUNTRY -> countriesDao.addCountry(telegramId, preference);
            default -> throw new IllegalArgumentException("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: " + type);
        };
    }


    // –û–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
    public Mono<String> deletePreferences(long telegramId, String input, String preferenceCommand) {
        CategoryType type = CategoryType.fromCommand(preferenceCommand);
        CheckResultLists checkResultLists = categoryCheckService.new CheckResultLists();

        // –ü–∞—Ä—Å–∏–º –≤–≤–æ–¥ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)
        List<String> parsedInput = Arrays.stream(input.split(","))
                .map(String::trim)
                .toList();

        if (parsedInput.isEmpty()) {
            return Mono.just("–í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.");
        }

        // –†–µ–∞–∫—Ç–∏–≤–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
        return Flux.fromIterable(parsedInput)
                .flatMap(pref -> Mono.fromCallable(() ->
                                        new PreferenceResult(pref, deletePreferenceFromUserDb(telegramId, pref, type))
                                )
                                .subscribeOn(Schedulers.boundedElastic())
                )
                .collectList()
                .map(results -> {
                    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–Ω–æ–µ –∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –≤ –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    results.forEach(r -> {
                        switch (r.status()) {
                            case PREFERENCE_DELETED -> checkResultLists.deletedPreferences.add(r.value());
                            case PREFERENCE_NOT_EXISTS -> checkResultLists.nonexistentPreferences.add(r.value());
                        }
                    });

                    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    return buildDeleteResultMessage(type, checkResultLists);
                });
    }


    // –ú–µ—Ç–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
    private String buildDeleteResultMessage(CategoryType type, CheckResultLists checkResultLists) {
        StringBuilder result = new StringBuilder();
        String category = type.getDisplayName().toLowerCase(); // "–∂–∞–Ω—Ä—ã", "—Ä–µ–∂–∏—Å—Å–µ—Ä—ã" –∏ —Ç.–¥.

        if (!checkResultLists.deletedPreferences.isEmpty()) {
            result.append("‚úÖ –ì–æ—Ç–æ–≤–æ! –≠—Ç–∏ ").append(category).append(" —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: \n")
                    .append("üóëÔ∏è ").append(String.join(", ", checkResultLists.deletedPreferences))
                    .append("\n\n");
        }

        if (!checkResultLists.nonexistentPreferences.isEmpty()) {
            result.append("‚ÑπÔ∏è –≠—Ç–∏ ").append(category).append(" –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å, –∏—Ö –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: \n")
                    .append("üîç ").append(String.join(", ", checkResultLists.nonexistentPreferences))
                    .append("\n\n");
        }

        return result.toString().trim();
    }


    // –ú–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏–∑ –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞)
    private int deletePreferenceFromUserDb(long telegramId, String preference, CategoryType type) {
        return switch (type) {
            case GENRE -> genreDao.deleteGenre(telegramId, preference.toLowerCase());
            case ACTOR -> actorsDao.deleteActor(telegramId, preference);
            case YEAR -> yearDao.deleteYear(telegramId, Integer.parseInt(preference));
            case COUNTRY -> countriesDao.deleteCountry(telegramId, preference);
            default -> throw new IllegalArgumentException("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: " + type);
        };
    }
}
