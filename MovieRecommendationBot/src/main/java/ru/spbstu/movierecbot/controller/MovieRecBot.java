package ru.spbstu.movierecbot.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.commands.BotCommand;
import org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeDefault;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.meta.generics.TelegramBot;
import reactor.core.publisher.Mono;
import reactor.core.scheduler.Schedulers;
import ru.spbstu.movierecbot.services.*;
import ru.spbstu.movierecbot.services.state.StateService;
import ru.spbstu.movierecbot.services.state.UserState;

import javax.annotation.PostConstruct;
import java.util.ArrayList;
import java.util.List;

@Component
public class MovieRecBot extends TelegramLongPollingBot implements TelegramBot {


    private final String botUsername;

    private final InfoAboutFilmService infoAboutFilmServiceService;
    private final UserService userService;
    private final WatchListService watchListService;
    private final WatchedListService watchedListService;
    private final StateService stateService;
    private final MenuService menuService;
    private final PreferencesService preferencesService;
    private final SearchFilmService searchFilmService;
    private final KeyboardService keyboardService;
    Mono<ReplyKeyboardMarkup> replyKeyboardMarkupMenu;
    Mono<ReplyKeyboardMarkup> replyKeyboardMarkupFilters;
    Mono<ReplyKeyboardMarkup> replyKeyboardMarkupSearch;
    Mono<ReplyKeyboardMarkup> replyKeyboardMarkupWatchList;
    Mono<ReplyKeyboardMarkup> replyKeyboardMarkupPreferences;
    Mono<ReplyKeyboardMarkup> replyKeyboardMarkupShowPeriod;
    Mono<ReplyKeyboardMarkup> replyKeyboardMarkupDeletePreferences;
    Mono<ReplyKeyboardMarkup> replyKeyboardMarkupWatchedList;
    Mono<ReplyKeyboardMarkup> replyKeyboardMarkupAddPreferences;


    @Autowired
    public MovieRecBot(
            @Value("${bot.token}") String botToken,
            @Value("${bot.username}") String botUsername, InfoAboutFilmService service, UserService userService, WatchListService watchListService, WatchedListService watchedListService, StateService stateService, MenuService menuService, PreferencesService preferencesService, SearchFilmService searchFilmService, KeyboardService keyboardService
    ) {
        super(botToken);
        this.botUsername = botUsername;
        this.infoAboutFilmServiceService = service;
        this.userService = userService;
        this.watchListService = watchListService;
        this.watchedListService = watchedListService;
        this.stateService = stateService;
        this.menuService = menuService;
        this.preferencesService = preferencesService;
        this.searchFilmService = searchFilmService;
        this.keyboardService = keyboardService;
        this.replyKeyboardMarkupMenu = keyboardService.menuKeyboardMarkup();
        this.replyKeyboardMarkupFilters = keyboardService.getFiltersKeyboard();
        this.replyKeyboardMarkupSearch = keyboardService.searchKeyboardMarkup();
        this.replyKeyboardMarkupWatchList = keyboardService.watchListKeyboardMarkup();
        this.replyKeyboardMarkupPreferences = keyboardService.preferencesKeyboardMarkup();
        this.replyKeyboardMarkupShowPeriod = keyboardService.showWatchedPeriodKeyboardMarkup();
        this.replyKeyboardMarkupDeletePreferences = keyboardService.deletePreferencesKeyboardMarkup();
        this.replyKeyboardMarkupWatchedList = keyboardService.watchedListKeyboardMarkup();
        this.replyKeyboardMarkupAddPreferences = keyboardService.addPreferencesKeyboardMarkup();

    }



    @PostConstruct
    private void init() {
        initializeBotCommands();
    }

    private void initializeBotCommands() {
        List<BotCommand> commands = new ArrayList<>();
        commands.add(new BotCommand("menu", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"));
        commands.add(new BotCommand("searchfilm", "–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤"));
        commands.add(new BotCommand("watchlist", "–ë—É–¥—É —Å–º–æ—Ç—Ä–µ—Ç—å"));
        commands.add(new BotCommand("watchedlist", "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã"));
        commands.add(new BotCommand("preferences", "–ú–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è"));
        commands.add(new BotCommand("infoaboutfilm", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª—å–º–µ"));

        try {
            execute(new SetMyCommands(commands, new BotCommandScopeDefault(), null));
        } catch (TelegramApiException e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥: " + e);
        }
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public void onUpdateReceived(Update update) {
        String command = update.getMessage().getText();
        String firstName = update.getMessage().getFrom().getFirstName() == null ? "" : update.getMessage().getFrom().getFirstName();
        String lastName = update.getMessage().getFrom().getLastName() == null ? "" : update.getMessage().getFrom().getFirstName();
        String username = (firstName + " " + lastName).trim();
        keyboardService.getCommandFromKeyboard(command).subscribeOn(Schedulers.boundedElastic()).subscribe(
                result -> {
                    String finalCommand = !result.equals("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")
                            ? result
                            : command;
                    if (finalCommand.equals("/start")||finalCommand.equals("/menu")||finalCommand.equals("/searchfilm")
                            || finalCommand.equals("/watchlist")|| finalCommand.equals("/preferences") || finalCommand.equals("/watchedlist")
                            || finalCommand.equals("/infoaboutfilm")){
                        handleMainCommand(finalCommand, update.getMessage().getChatId(),
                                username);
                    }
                    else{
                        handleStatefulInput(finalCommand, update.getMessage().getChatId(), username);
                    }
                }
        );
    }

    private void handleMainCommand(String command, Long chatId, String username){
        StringBuilder response = new StringBuilder();
        switch (command) {
            case "/start":
                userService.registerUser(chatId);
                response.append("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MovieRecBot, ").append(username).append("!\n\n");
                menuService.showMainMenu().subscribeOn(Schedulers.boundedElastic())
                        .subscribe(
                                result -> {
                                    response.append(result);
                                    sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupMenu);
                                    stateService.setState(chatId, UserState.IDLE);
                                }
                        );
                break;
            case "/menu":
                menuService.showMainMenu().subscribeOn(Schedulers.boundedElastic())
                                .subscribe(
                                        result -> {
                                            response.append(result);
                                            sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupMenu);
                                            stateService.setState(chatId, UserState.IDLE);
                                        }
                                );
                break;
            case "/searchfilm":
                response.append("""
                        üîç <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤:</b>
                        
                        üéõÔ∏è A. /searchByFilters - –ü–æ–∏—Å–∫ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º
                        ‚ù§Ô∏è B. /searchByPref - –ü–æ–∏—Å–∫ –ø–æ –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º
                        üé≤ C. /searchRandom - –°–ª—É—á–∞–π–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
                        
                        –ö–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω? üòä""");
                sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupSearch);
                stateService.setState(chatId, UserState.WAITING_SEARCH_COMMAND);
                break;
            case "/watchlist":
                response.append("""
                        \uD83D\uDCCB <b>–†–∞–±–æ—Ç–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º ¬´–ë—É–¥—É —Å–º–æ—Ç—Ä–µ—Ç—å¬ª</b>
                        
                        –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É:
                        \uD83D\uDC41\uFE0F /showWatchList ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫
                        ‚ûï /addToWatchList ‚Äî –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º
                        \uD83D\uDDD1\uFE0F /deleteFromWatchList ‚Äî –£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å–º
                        
                        –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π –ª–µ–≥–∫–æ! \uD83D\uDE09""");
                sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupWatchList);
                stateService.setState(chatId, UserState.WAITING_WATCH_LIST_COMMAND);
                break;
            case "/preferences":
                response.append("""
                        \uD83C\uDF1F <b>–†–∞–±–æ—Ç–∞ —Å –≤–∞—à–∏–º–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏</b> \uD83C\uDF1F
                        
                        –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
                        
                        \uD83D\uDD0D /showMyPreferences - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
                        ‚ûï /addPreferences - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
                        ‚ùå /deletePreferences - –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
                        
                        –í–∞—à –≤—ã–±–æ—Ä –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å –ø–æ–¥–±–æ—Ä–∫—É –∏–¥–µ–∞–ª—å–Ω–æ–π! \uD83D\uDCAB""");
                sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupPreferences);
                stateService.setState(chatId, UserState.WAITING_PREFERENCE_COMMAND);
                break;
            case "/watchedlist":
                response.append("""
                        \uD83C\uDFAC <b>–†–∞–±–æ—Ç–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã"</b> \uD83C\uDFAC
                        
                        –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
                        
                        \uD83D\uDCCB /showWatchedFilmsList - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã
                        ‚ûï /addToWatchedFilmsList - –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º –≤ —Å–ø–∏—Å–æ–∫
                        ‚≠ê /addMarkToWatchedFilm - –û—Ü–µ–Ω–∏—Ç—å —Ñ–∏–ª—å–º
                        ‚úè\uFE0F /addReviewToWatchedFilm - –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤
                        
                         –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –≤–∞—à–∏ –∫–∏–Ω–æ–≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è! \uD83C\uDF7F""");
                sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupWatchedList);
                stateService.setState(chatId, UserState.WAITING_WATCHED_LIST_COMMAND);
                break;
            case "/infoaboutfilm":
                response.append("\uD83D\uDD0D –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, –æ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:");
                sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupMenu);
                stateService.setState(chatId, UserState.WAITING_FILM_TITLE_FOR_INF);
                break;
            default:
                response.append("ü§∑‚Äç‚ôÇÔ∏è –û–π! –¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è:\n" +
                        "/menu - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥");
                sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupMenu);
        }
    }
    private void handleCommand(String command, Long chatId) {
        StringBuilder response = new StringBuilder();


        switch (command) {
            case "/addToWatchList":
                sendResponse(chatId, "üìã –û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫–æ–π —Ñ–∏–ª—å–º –¥–æ–±–∞–≤–∏–º –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫ \"–ë—É–¥—É —Å–º–æ—Ç—Ä–µ—Ç—å\"?");
                stateService.setState(chatId, UserState.WAITING_FILM_TITLE_FOR_ADD_TO_WATCH_LIST);
                break;
            case "/deleteFromWatchList":
                sendResponse(chatId, "üóëÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ \"–ë—É–¥—É —Å–º–æ—Ç—Ä–µ—Ç—å\":");
                stateService.setState(chatId, UserState.WAITING_FILM_TITLE_FOR_DELETE_FROM_WATCH_LIST);
                break;
            case "/showWatchList":
                watchListService.showWatchList(chatId).subscribeOn(Schedulers.boundedElastic())
                        .subscribe(
                                result -> {
                                    response.append(result);
                                    sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupWatchList);
                                    stateService.setState(chatId, UserState.WAITING_WATCH_LIST_COMMAND);
                                }
                        );
                break;
            case "/addPreferences":
                response.append("""
                        üåü <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π</b> üåü
                        
                        –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
                        
                        üé≠ /addGenrePreferences - –õ—é–±–∏–º—ã–µ –∂–∞–Ω—Ä—ã
                        üë®‚Äçüé§ /addActorPreferences - –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ –∞–∫—Ç–µ—Ä—ã
                        üåç /addCountryPreferences - –°—Ç—Ä–∞–Ω—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
                        üìÖ /addYearPreferences - –ì–æ–¥—ã –≤—ã–ø—É—Å–∫–∞
                        
                        –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–±–æ—Ä–∫—É –ø–æ–¥ —Å–≤–æ–π –≤–∫—É—Å! üí´""");
                sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupAddPreferences);
                stateService.setState(chatId, UserState.WAITING_PREF_TYPE_FOR_ADD);
                break;
            case "/addGenrePreferences":
                sendResponse(chatId, "üìã –í–≤–µ–¥–∏—Ç–µ –ª—é–±–∏–º—ã–µ –∂–∞–Ω—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:");
                stateService.setState(chatId, UserState.WAITING_GENRE_FOR_ADD);
                break;
            case "/addActorPreferences":
                sendResponse(chatId, "üë®‚Äçüé§ –í–≤–µ–¥–∏—Ç–µ –∞–∫—Ç–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:");
                stateService.setState(chatId, UserState.WAITING_ACTOR_FOR_ADD);
                break;
            case "/addCountryPreferences":
                sendResponse(chatId, "üó∫Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:");
                stateService.setState(chatId, UserState.WAITING_COUNTRY_FOR_ADD);
                break;
            case "/addYearPreferences":
                sendResponse(chatId, """
                        ‚è≥ –í–≤–µ–¥–∏—Ç–µ –≥–æ–¥—ã –≤—ã–ø—É—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤:
                        
                        ‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω:  <b>2005-2010</b>
                        ‚Ä¢ –û—Ç–¥–µ–ª—å–Ω—ã–µ –≥–æ–¥—ã: <b>2012, 2015, 2018</b>
                        
                        –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ üé¨""");
                stateService.setState(chatId, UserState.WAITING_YEAR_FOR_ADD);
                break;
            case "/deletePreferences":
                response.append("""
                        üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π</b> üóëÔ∏è
                        
                        –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:
                        
                        üé≠ /deleteGenrePreferences - –£–¥–∞–ª–∏—Ç—å –∂–∞–Ω—Ä—ã
                        üë®‚Äçüé§ /deleteActorPreferences - –£–¥–∞–ª–∏—Ç—å –∞–∫—Ç–µ—Ä–æ–≤
                        üåç /deleteCountryPreferences - –£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω—ã
                        üìÖ /deleteYearPreferences - –£–¥–∞–ª–∏—Ç—å –≥–æ–¥—ã
                        
                        –í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è ‚ùå""");
                sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupDeletePreferences);
                stateService.setState(chatId, UserState.WAITING_PREF_TYPE_FOR_DELETE);
                break;
            case "/deleteGenrePreferences":
                sendResponse(chatId, "‚úÇÔ∏è –í–≤–µ–¥–∏—Ç–µ –∂–∞–Ω—Ä—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:");
                stateService.setState(chatId, UserState.WAITING_GENRE_FOR_DELETE);
                break;
            case "/deleteActorPreferences":
                sendResponse(chatId, "‚úÇÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ –∞–∫—Ç–µ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:");
                stateService.setState(chatId, UserState.WAITING_ACTOR_FOR_DELETE);
                break;
            case "/deleteCountryPreferences":
                sendResponse(chatId, "‚úÇÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:");
                stateService.setState(chatId, UserState.WAITING_COUNTRY_FOR_DELETE);
                break;
            case "/deleteYearPreferences":
                sendResponse(chatId, """
                        üóìÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –≥–æ–¥–æ–≤ –∏–∑ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π</b> üóìÔ∏è
                        
                        –í–≤–µ–¥–∏—Ç–µ:
                        ‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω: <b>2005-2010</b>
                        ‚Ä¢ –ò–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≥–æ–¥—ã: <b>2012, 2015, 2018</b>
                        
                        ‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–µ –≥–æ–¥—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –∏–∑ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π.""");
                stateService.setState(chatId, UserState.WAITING_YEAR_FOR_DELETE);
                break;
            case "/showMyPreferences":
                preferencesService.showPreferences(chatId).subscribeOn(Schedulers.boundedElastic())
                        .subscribe(
                                result -> {
                                    response.append(result);
                                    sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupPreferences);
                                    stateService.setState(chatId, UserState.WAITING_PREFERENCE_COMMAND);
                                }
                        );
                break;
            case "/addToWatchedFilmsList":
                sendResponse(chatId, "üçø –ö–∞–∫–æ–π —Ñ–∏–ª—å–º –≤—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏?\n" +
                        "–î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ \"–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ\", —É–∫–∞–∑–∞–≤ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:");
                stateService.setState(chatId, UserState.WAITING_FILM_TITLE_FOR_ADD_TO_WATCHED_LIST);
                break;
            case "/addMarkToWatchedFilm":
                sendResponse(chatId, "‚≠ê –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏:");
                stateService.setState(chatId, UserState.WAITING_FILM_TITLE_FOR_ADD_MARK);
                break;
            case "/addReviewToWatchedFilm":
                sendResponse(chatId, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞:");
                stateService.setState(chatId, UserState.WAITING_FILM_TITLE_FOR_ADD_REVIEW);
                break;
            case "/showWatchedFilmsList":
                response.append("""
                        üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏:</b>
                        
                        ‚è≥ /threeMonths - –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞
                        üóìÔ∏è /lastMonth - –ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü
                        üéâ /lastYear - –ü—Ä–æ—à–ª—ã–π –≥–æ–¥
                        üèÜ /allPeriod - –í—Å—ë –≤—Ä–µ–º—è
                        üîç /exactPeriod - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã
                        
                        –ú—ã –ø–æ–∫–∞–∂–µ–º –≤–∞—à–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ \uD83D\uDFE3.""");
                sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupShowPeriod);
                stateService.setState(chatId, UserState.WAITING_SHOW_TYPE);
                break;
            case "/threeMonths", "/lastMonth", "/lastYear":
                watchedListService.showWatchedFilmsListByPeriod(chatId, command).subscribeOn(Schedulers.boundedElastic())
                        .subscribe(
                                result -> {
                                    response.append(result);
                                    sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupShowPeriod);
                                    stateService.setState(chatId, UserState.WAITING_SHOW_TYPE);
                                }
                        );
                break;
            case "/allPeriod" :
                watchedListService.showWatchedFilmsListByAllPeriod(chatId).subscribeOn(Schedulers.boundedElastic())
                        .subscribe(
                                result -> {
                                    response.append(result);
                                    sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupShowPeriod);
                                    stateService.setState(chatId, UserState.WAITING_SHOW_TYPE);
                                }
                        );
                break;
            case "/exactPeriod":
                sendResponse(chatId, """
                        üìÜ –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
                        <b>–¥–¥.–º–º.–≥–≥–≥–≥ - –¥–¥.–º–º.–≥–≥–≥–≥</b>
                        
                        –ü—Ä–∏–º–µ—Ä: <b>01.09.2024 - 30.09.2024</b>""");
                stateService.setState(chatId, UserState.WAITING_PERIOD);
                break;
            case "/searchByPref":
                searchFilmService.searchFilmByPreferences(chatId).subscribeOn(Schedulers.boundedElastic())
                        .subscribe(
                                result -> {
                                    List<String> resultFilms = List.of(result.split("---CUTHERESPLITTER---"));

                                    stateService.setState(chatId, UserState.WAITING_SEARCH_COMMAND);
                                    //response.append(result);
                                    resultFilms.forEach(filmMessage -> {
                                        sendResponseWithKeyboardMarkup(chatId, filmMessage, replyKeyboardMarkupSearch);
                                    });

                                }
                        );
                break;
            case "/searchRandom":
                searchFilmService.searchRandomFilm().subscribeOn(Schedulers.boundedElastic())
                        .subscribe(
                                result -> {
                                    response.append(result);
                                    sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupSearch);
                                    stateService.setState(chatId, UserState.WAITING_SEARCH_COMMAND);
                                }
                        );
                break;
            case "/searchByFilters":
                response.append("""
                        ‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞:</b>
                        
                        üé≠ /chooseGenres - –í—ã–±—Ä–∞—Ç—å –∂–∞–Ω—Ä—ã
                        üåü /chooseActors - –í—ã–±—Ä–∞—Ç—å –∞–∫—Ç–µ—Ä–æ–≤
                        ‚≠ê /chooseRate - –í—ã–±—Ä–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥
                        ‚è±Ô∏è /chooseDuration - –í—ã–±—Ä–∞—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                        üìÖ /chooseYears - –í—ã–±—Ä–∞—Ç—å –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞
                        üåç /chooseCountry - –í—ã–±—Ä–∞—Ç—å —Å—Ç—Ä–∞–Ω—É
                        \uD83D\uDC40 /showFilters - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
                        ‚úÖ /applyFilters - –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
                        
                        ‚ö†Ô∏è –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤—ã–±–æ—Ä–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω.""");
                sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupFilters);
                stateService.setState(chatId, UserState.WAITING_FILTER);
                break;
            case "/chooseGenres":
                response.append("üé≠ –í–≤–µ–¥–∏—Ç–µ –∂–∞–Ω—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ñ–∏–ª—å—Ç—Ä—ã:");
                sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupFilters);
                stateService.setState(chatId, UserState.WAITING_GENRE_FILTER);
                break;
            case "/chooseActors":
                response.append("\uD83C\uDF1F –í–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ –∞–∫—Ç–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ñ–∏–ª—å—Ç—Ä—ã:");
                sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupFilters);
                stateService.setState(chatId, UserState.WAITING_ACTOR_FILTER);
                break;
            case "/chooseRate":
                response.append("""
                        ‚≠ê <b>–í–≤–µ–¥–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ñ–∏–ª—å—Ç—Ä—ã:</b>
                        ‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω: 7-9
                        ‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 8, 8.5, 9
                        
                        –û—Ç 0 –¥–æ 10 (–Ω–∞–ø—Ä–∏–º–µ—Ä: 7.5-9.2)
                        """);
                sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupFilters);
                stateService.setState(chatId, UserState.WAITING_RATE_FILTER);
                break;
            case "/chooseDuration":
                response.append("""
                        ‚è≥ <b>–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–≤ –º–∏–Ω—É—Ç–∞—Ö) –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ñ–∏–ª—å—Ç—Ä—ã:</b>
                        –§–æ—Ä–º–∞—Ç: 90-120
                        
                        –ú–∏–Ω–∏–º—É–º: 0 –º–∏–Ω
                        –ú–∞–∫—Å–∏–º—É–º: 51420 –º–∏–Ω (‚âà35 –¥–Ω–µ–π) üòÖ""");
                sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupFilters);
                stateService.setState(chatId, UserState.WAITING_DURATION_FILTER);
                break;
            case "/chooseYears":
                response.append("""
                        üìÖ <b>–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥—ã –≤—ã–ø—É—Å–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ñ–∏–ª—å—Ç—Ä—ã:</b>
                        ‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω: 2000-2010
                        ‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≥–æ–¥—ã: 2015, 2018, 2020""");
                sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupFilters);
                stateService.setState(chatId, UserState.WAITING_YEAR_FILTER);
                break;
            case "/chooseCountry":
                response.append("üåé –í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ñ–∏–ª—å—Ç—Ä—ã:");
                sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupFilters);
                stateService.setState(chatId, UserState.WAITING_COUNTRY_FILTER);
                break;
            case "/applyFilters":
                searchFilmService.applySearchFilters(chatId).subscribeOn(Schedulers.boundedElastic())
                        .subscribe(
                                result -> {
                                    List<String> resultFilms = List.of(result.split("---CUTHERESPLITTER---"));
                                    if (!resultFilms.isEmpty()) {
                                        sendResponseWithKeyboardMarkup(chatId, "‚ú® –í–æ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã –ø–æ –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º:", replyKeyboardMarkupSearch);
                                    } else {
                                        sendResponseWithKeyboardMarkup(chatId, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º—ã –ø–æ –≤–∞—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º\uD83D\uDE22", replyKeyboardMarkupSearch);
                                    }
                                    stateService.setState(chatId, UserState.WAITING_SEARCH_COMMAND);
                                    //response.append(result);
                                    resultFilms.forEach(filmMessage -> {
                                        sendResponse(chatId, filmMessage);
                                    });

                                }
                        );
                break;
            case "/showFilters":
                searchFilmService.showFilters(chatId).subscribeOn(Schedulers.boundedElastic())
                        .subscribe(
                                result -> {
                                    response.append(result);
                                    sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupFilters);
                                    stateService.setState(chatId, UserState.WAITING_FILTER);
                                }
                        );
                break;
            default:
                response.append("ü§∑‚Äç‚ôÇÔ∏è –û–π! –¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è:\n" +
                        "/menu - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.");
                sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupMenu);
        }
    }


    private void handleStatefulInput(String input, Long chatId, String username) {
        StringBuilder response = new StringBuilder();
        UserState currentState = stateService.getState(chatId);
        switch (currentState) {
            case IDLE:
                handleMainCommand(input, chatId, username);
                break;
            case WAITING_FILM_TITLE_FOR_INF:
                infoAboutFilmServiceService.getInfoAboutFilm(input).subscribeOn(Schedulers.boundedElastic())
                        .subscribe(
                                result -> {
                                    response.append(result);
                                    sendResponseWithKeyboardMarkup(chatId, response.toString(),replyKeyboardMarkupMenu);

                                    stateService.setState(chatId, UserState.IDLE);
                                }
                        );
                break;
            case WAITING_WATCH_LIST_COMMAND:
                if (input.equals("/addToWatchList") || input.equals("/deleteFromWatchList") || input.equals("/showWatchList")){
                    handleCommand(input, chatId);
                }
                else{
                    response.append("""
                            ‚ö†Ô∏è <b>–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞</b> ‚ö†Ô∏è
                            
                            –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
                            ‚ûï /addToWatchList - –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º
                            üóëÔ∏è /deleteFromWatchList - –£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å–º
                            üìã /showWatchList - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫
                            
                            –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üòä""");
                    sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupWatchList);
                    stateService.setState(chatId,UserState.WAITING_WATCH_LIST_COMMAND);
                }
                break;
            case WAITING_FILM_TITLE_FOR_ADD_TO_WATCH_LIST:
                watchListService.addToWatchList(chatId, input).subscribeOn(Schedulers.boundedElastic())
                        .subscribe(
                                result -> {
                                    response.append(result);
                                    sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupWatchList);
                                    stateService.setState(chatId, UserState.WAITING_WATCH_LIST_COMMAND);
                                }
                        );
                break;
            case WAITING_FILM_TITLE_FOR_DELETE_FROM_WATCH_LIST:
                watchListService.deleteFromWatchList(chatId, input).subscribeOn(Schedulers.boundedElastic())
                        .subscribe(
                                result -> {
                                    response.append(result);
                                    sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupWatchList);
                                    stateService.setState(chatId, UserState.WAITING_WATCH_LIST_COMMAND);
                                }
                        );
                break;
            case WAITING_PREFERENCE_COMMAND:
                if (input.equals("/addPreferences") || input.equals("/deletePreferences") || input.equals("/showMyPreferences")){
                    handleCommand(input, chatId);
                }
                else{
                    response.append("""
                            ‚ö†Ô∏è <b>–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞</b> ‚ö†Ô∏è
                            
                            –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
                            ‚ûï /addPreferences - –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
                            üóëÔ∏è /deletePreferences - –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
                            üëÄ /showMyPreferences - –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
                            
                            –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üòä""");
                    sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupPreferences);
                    stateService.setState(chatId,UserState.WAITING_PREFERENCE_COMMAND);
                }
                break;
            case WAITING_PREF_TYPE_FOR_ADD:
                if (input.equals("/addGenrePreferences") || input.equals("/addActorPreferences") || input.equals("/addCountryPreferences")||
                input.equals("/addYearPreferences")){
                    handleCommand(input, chatId);
                }
                else{
                    response.append("""
                            ‚ö†Ô∏è <b>–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥</b> ‚ö†Ô∏è
                            
                            –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:
                            üé≠ /addGenrePreferences - –ñ–∞–Ω—Ä—ã
                            üåü /addActorPreferences - –ê–∫—Ç–µ—Ä—ã
                            üåç /addCountryPreferences - –°—Ç—Ä–∞–Ω—ã
                            üìÖ /addYearPreferences - –ì–æ–¥—ã
                            
                            –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑! üòä""");
                    sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupAddPreferences);
                    stateService.setState(chatId,UserState.WAITING_PREF_TYPE_FOR_ADD);
                }
                break;
            case WAITING_GENRE_FOR_ADD:
                preferencesService.addPreferences(chatId, input, "genre").subscribeOn(Schedulers.boundedElastic())
                        .subscribe(
                                result -> {
                                    response.append(result);
                                    sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupAddPreferences);
                                    stateService.setState(chatId,UserState.WAITING_PREF_TYPE_FOR_ADD);
                                }
                        );
                break;
            case WAITING_ACTOR_FOR_ADD:
                preferencesService.addPreferences(chatId, input, "actor").subscribeOn(Schedulers.boundedElastic())
                        .subscribe(
                                result -> {
                                    response.append(result);
                                    sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupAddPreferences);
                                    stateService.setState(chatId,UserState.WAITING_PREF_TYPE_FOR_ADD);
                                }
                        );

                break;
            case WAITING_COUNTRY_FOR_ADD:
                preferencesService.addPreferences(chatId, input, "country").subscribeOn(Schedulers.boundedElastic())
                        .subscribe(
                                result -> {
                                    response.append(result);
                                    sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupAddPreferences);
                                    stateService.setState(chatId,UserState.WAITING_PREF_TYPE_FOR_ADD);
                                }
                        );
                break;
            case WAITING_YEAR_FOR_ADD:
                preferencesService.addPreferences(chatId, input, "year").subscribeOn(Schedulers.boundedElastic())
                        .subscribe(
                                result -> {
                                    response.append(result);
                                    sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupAddPreferences);
                                    stateService.setState(chatId,UserState.WAITING_PREF_TYPE_FOR_ADD);
                                }
                        );
                break;
            case WAITING_PREF_TYPE_FOR_DELETE:
                if (input.equals("/deleteGenrePreferences") || input.equals("/deleteActorPreferences") || input.equals("/deleteCountryPreferences")||
                        input.equals("/deleteYearPreferences")){
                    handleCommand(input, chatId);
                }
                else{
                    response.append("""
                            ‚ö†Ô∏è <b>–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥</b> ‚ö†Ô∏è
                            
                            –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:
                            üé≠ /deleteGenrePreferences - –ñ–∞–Ω—Ä—ã
                            üë®‚Äçüé§ /deleteActorPreferences - –ê–∫—Ç–µ—Ä—ã
                            üåé /deleteCountryPreferences - –°—Ç—Ä–∞–Ω—ã
                            üìÜ /deleteYearPreferences - –ì–æ–¥—ã
                            
                            –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑! üòä""");
                    sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupDeletePreferences);
                    stateService.setState(chatId,UserState.WAITING_PREF_TYPE_FOR_DELETE);
                }
                break;
            case WAITING_GENRE_FOR_DELETE:
                preferencesService.deletePreferences(chatId, input, "genre").subscribeOn(Schedulers.boundedElastic())
                        .subscribe(
                                result -> {
                                    response.append(result);
                                    sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupDeletePreferences);
                                    stateService.setState(chatId,UserState.WAITING_PREF_TYPE_FOR_DELETE);
                                }
                        );
                break;
            case WAITING_ACTOR_FOR_DELETE:
                preferencesService.deletePreferences(chatId, input, "actor").subscribeOn(Schedulers.boundedElastic())
                        .subscribe(
                                result -> {
                                    response.append(result);
                                    sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupDeletePreferences);
                                    stateService.setState(chatId,UserState.WAITING_PREF_TYPE_FOR_DELETE);
                                }
                        );
                break;
            case WAITING_COUNTRY_FOR_DELETE:
                preferencesService.deletePreferences(chatId, input, "country").subscribeOn(Schedulers.boundedElastic())
                        .subscribe(
                                result -> {
                                    response.append(result);
                                    sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupDeletePreferences);
                                    stateService.setState(chatId,UserState.WAITING_PREF_TYPE_FOR_DELETE);
                                }
                        );
                break;
            case WAITING_YEAR_FOR_DELETE:
                preferencesService.deletePreferences(chatId, input, "year").subscribeOn(Schedulers.boundedElastic())
                        .subscribe(
                                result -> {
                                    response.append(result);
                                    sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupDeletePreferences);
                                    stateService.setState(chatId,UserState.WAITING_PREF_TYPE_FOR_DELETE);
                                }
                        );
                break;
            case WAITING_WATCHED_LIST_COMMAND:
                if (input.equals("/addToWatchedFilmsList") || input.equals("/addMarkToWatchedFilm") || input.equals("/addReviewToWatchedFilm")||
                        input.equals("/showWatchedFilmsList")){
                    handleCommand(input, chatId);
                }
                else{
                    response.append("""
                            ‚ö†Ô∏è <b>–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥</b> ‚ö†Ô∏è
                            
                            –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å–º–∞–º–∏:
                            üé¨ /addToWatchedFilmsList - –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º
                            ‚≠ê /addMarkToWatchedFilm - –ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É
                            ‚úèÔ∏è /addReviewToWatchedFilm - –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤
                            üìã /showWatchedFilmsList - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫
                            
                            –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑! üòä""");
                    sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupWatchedList);
                    stateService.setState(chatId,UserState.WAITING_WATCHED_LIST_COMMAND);
                }
                break;
            case WAITING_FILM_TITLE_FOR_ADD_TO_WATCHED_LIST:
                watchedListService.addToWatchedFilmsList(chatId, input).subscribeOn(Schedulers.boundedElastic())
                        .subscribe(
                                result -> {
                                    response.append(result);
                                    sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupWatchedList);
                                    stateService.setState(chatId,UserState.WAITING_WATCHED_LIST_COMMAND);
                                }
                        );
                break;
            case WAITING_FILM_TITLE_FOR_ADD_MARK:
                watchedListService.checkingForMovieExistence(chatId, input)
                        .subscribeOn(Schedulers.boundedElastic())
                        .switchIfEmpty(Mono.fromRunnable(() -> {
                            response.append("üòï –§–∏–ª—å–º \"").append(input).append("\" –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.");
                            sendResponse(chatId, response.toString());
                            stateService.setState(chatId, UserState.WAITING_FILM_TITLE_FOR_ADD_MARK);
                        }))
                        .subscribe(filmId -> {
                            response.append("üéâ –û—Ç–ª–∏—á–Ω–æ! –§–∏–ª—å–º \"").append(input).append("\" –Ω–∞–π–¥–µ–Ω!\n\n")
                                    .append("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –µ–≥–æ —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –æ—Ç 0 –¥–æ 10:");
                            sendResponse(chatId, response.toString());
                            stateService.setState(chatId, UserState.WAITING_MARK);
                        });
                break;

            case WAITING_MARK:
                watchedListService.addMarkToWatchedFilm(chatId, input)
                        .subscribeOn(Schedulers.boundedElastic())
                        .switchIfEmpty(Mono.fromRunnable(() -> {
                            response.append("‚ö†Ô∏è –û–π! –ö–∞–∂–µ—Ç—Å—è, –≤—ã –æ—à–∏–±–ª–∏—Å—å.\n")
                                    .append("–û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –æ—Ç 0 –¥–æ 10.\n")
                                    .append("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üòä");
                            sendResponse(chatId, response.toString());
                            stateService.setState(chatId, UserState.WAITING_MARK);
                        }))
                        .subscribe(result -> {
                            response.append(result);
                            sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupWatchedList);
                            stateService.setState(chatId, UserState.WAITING_WATCHED_LIST_COMMAND);
                        });
                break;

            case WAITING_FILM_TITLE_FOR_ADD_REVIEW:
                watchedListService.checkingForMovieExistence(chatId, input)
                        .subscribeOn(Schedulers.boundedElastic())
                        .switchIfEmpty(Mono.fromRunnable(() -> {
                            response.append("üòï –§–∏–ª—å–º \"").append(input).append("\" –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.");
                            sendResponse(chatId, response.toString());
                            stateService.setState(chatId, UserState.WAITING_FILM_TITLE_FOR_ADD_REVIEW);
                        }))
                        .subscribe(filmId -> {
                            response.append("‚úÖ –§–∏–ª—å–º \"").append(input).append("\" –Ω–∞–π–¥–µ–Ω!\n\n")
                                    .append("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n")
                                    .append("–ú–æ–∂–Ω–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏, –æ—Ü–µ–Ω–∫–æ–π –∞–∫—Ç–µ—Ä—Å–∫–æ–π –∏–≥—Ä—ã –∏–ª–∏ —Å—é–∂–µ—Ç–∞.");
                            sendResponse(chatId, response.toString());
                            stateService.setState(chatId, UserState.WAITING_REVIEW);
                        });
                break;
            case WAITING_REVIEW:
                watchedListService.addReviewToWatchedFilm(chatId, input).subscribeOn(Schedulers.boundedElastic())
                        .subscribe(
                                result -> {
                                    response.append(result);
                                    sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupWatchedList);
                                    stateService.setState(chatId, UserState.WAITING_WATCHED_LIST_COMMAND);
                                }
                        );
                break;
            case WAITING_SHOW_TYPE:
                    if (input.equals("/threeMonths") || input.equals("/lastMonth") || input.equals("/lastYear")||
                    input.equals("/allPeriod")|| input.equals("/exactPeriod")) {
                        handleCommand(input, chatId);
                    } else {
                        response.append("‚ö†Ô∏è <b>–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞</b> ‚ö†Ô∏è\n\n")
                                .append("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã:\n")
                                .append("‚è≥ /threeMonths - 3 –º–µ—Å—è—Ü–∞\n")
                                .append("üìÖ /lastMonth - –ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü\n")
                                .append("üéâ /lastYear - –ü—Ä–æ—à–ª—ã–π –≥–æ–¥\n")
                                .append("üèÜ /allPeriod - –í—Å–µ –≤—Ä–µ–º—è\n")
                                .append("üîç /exactPeriod - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã\n")
                                .append("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!");
                        sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupShowPeriod);
                        stateService.setState(chatId, UserState.WAITING_SHOW_TYPE);
                    }
                break;
            case WAITING_PERIOD:
                watchedListService.showWatchedFilmsListByExactPeriod(chatId, input).subscribeOn(Schedulers.boundedElastic())
                        .subscribe(
                                result -> {
                                    response.append(result);
                                    sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupShowPeriod);
                                    stateService.setState(chatId, UserState.WAITING_SHOW_TYPE);
                                }
                        );
                break;
            case WAITING_SEARCH_COMMAND:
                if (input.equals("/searchByPref") || input.equals("/searchRandom") || input.equals("/searchByFilters")){
                    handleCommand(input, chatId);
                }
                else {
                    response.append("""
                            ‚ö†Ô∏è <b>–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥</b> ‚ö†Ô∏è
                            
                            –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:
                            üéõÔ∏è A. /searchByFilters - –ü–æ–∏—Å–∫ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º
                            ‚ù§Ô∏è B. /searchByPref - –ü–æ–∏—Å–∫ –ø–æ –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º
                            üé≤ C. /searchRandom - –°–ª—É—á–∞–π–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
                            
                            –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑! üòä""");
                    sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupSearch);
                    stateService.setState(chatId,UserState.WAITING_SEARCH_COMMAND);

                }
                break;
            case WAITING_FILTER:
                if (input.equals("/chooseGenres") || input.equals("/chooseActors") || input.equals("/chooseRate")||
                        input.equals("/chooseDuration")||input.equals("/chooseYears")||input.equals("/chooseCountry")
                || input.equals("/applyFilters") || input.equals("/showFilters")){
                    handleCommand(input, chatId);
                }
                else{
                    response.append("""
                            ‚ö†Ô∏è <b>–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥</b> ‚ö†Ô∏è
                            
                            –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤:
                            üé≠ /chooseGenres - –í—ã–±—Ä–∞—Ç—å –∂–∞–Ω—Ä—ã
                            üåü /chooseActors - –í—ã–±—Ä–∞—Ç—å –∞–∫—Ç–µ—Ä–æ–≤
                            ‚≠ê /chooseRate - –í—ã–±—Ä–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥
                            ‚è±Ô∏è /chooseDuration - –í—ã–±—Ä–∞—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                            üìÖ /chooseYears - –í—ã–±—Ä–∞—Ç—å –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞
                            üåç /chooseCountry - –í—ã–±—Ä–∞—Ç—å —Å—Ç—Ä–∞–Ω—É
                            \uD83D\uDC40 /showFilters - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
                            ‚úÖ /applyFilters - –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
                            
                            ‚ö†Ô∏è –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤—ã–±–æ—Ä–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω
                            """);
                    sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupFilters);
                    stateService.setState(chatId,UserState.WAITING_FILTER);
                }
                break;
            case WAITING_ACTOR_FILTER:
                searchFilmService.addSearchFilter(chatId, input, "actor").subscribeOn(Schedulers.boundedElastic())
                        .subscribe(
                                result -> {
                                    response.append(result);
                                    sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupFilters);
                                    stateService.setState(chatId, UserState.WAITING_FILTER);
                                }
                        );
                break;
            case WAITING_GENRE_FILTER:
                searchFilmService.addSearchFilter(chatId, input, "genre").subscribeOn(Schedulers.boundedElastic())
                        .subscribe(
                                result -> {
                                    response.append(result);
                                    sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupFilters);
                                    stateService.setState(chatId, UserState.WAITING_FILTER);
                                }
                        );
                break;
            case WAITING_RATE_FILTER:
                searchFilmService.addSearchFilter(chatId, input, "rate").subscribeOn(Schedulers.boundedElastic())
                        .subscribe(
                                result -> {
                                    response.append(result);
                                    sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupFilters);
                                    stateService.setState(chatId, UserState.WAITING_FILTER);
                                }
                        );
                break;
            case WAITING_DURATION_FILTER:
                searchFilmService.addSearchFilter(chatId, input, "duration").subscribeOn(Schedulers.boundedElastic())
                        .subscribe(
                                result -> {
                                    response.append(result);
                                    sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupFilters);
                                    stateService.setState(chatId, UserState.WAITING_FILTER);
                                }
                        );
                break;
            case WAITING_YEAR_FILTER:
                searchFilmService.addSearchFilter(chatId, input, "year").subscribeOn(Schedulers.boundedElastic())
                        .subscribe(
                                result -> {
                                    response.append(result);
                                    sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupFilters);
                                    stateService.setState(chatId, UserState.WAITING_FILTER);
                                }
                        );
                break;
            case WAITING_COUNTRY_FILTER:
                searchFilmService.addSearchFilter(chatId, input, "country").subscribeOn(Schedulers.boundedElastic())
                        .subscribe(
                                result -> {
                                    response.append(result);
                                    sendResponseWithKeyboardMarkup(chatId, response.toString(), replyKeyboardMarkupFilters);
                                    stateService.setState(chatId, UserState.WAITING_FILTER);
                                }
                        );
                break;
            default:
                sendResponse(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.");
        }
    }

    private void sendResponse(Long chatId, String text) {
    SendMessage message = new SendMessage();
    message.setChatId(chatId.toString());
    message.setText(text);
    message.setParseMode("HTML");
    try {
        execute(message);
    } catch (TelegramApiException e) {
        System.out.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: " + e);}
    }

    private void sendResponseWithKeyboardMarkup(Long chatId, String text, Mono<ReplyKeyboardMarkup> keyboardMarkup) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);
        message.setParseMode("HTML");
        keyboardMarkup.subscribeOn(Schedulers.boundedElastic()).subscribe(
                message::setReplyMarkup
        );
        try {
            execute(message);
        } catch (TelegramApiException e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π: " + e);}
    }
}